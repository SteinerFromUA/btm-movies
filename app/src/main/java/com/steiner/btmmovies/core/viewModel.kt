package com.steiner.btmmovies.core

import android.os.Bundle
import androidx.lifecycle.AbstractSavedStateViewModelFactory
import androidx.lifecycle.SavedStateHandle
import androidx.lifecycle.ViewModel
import androidx.savedstate.SavedStateRegistryOwner
import dagger.Binds
import dagger.MapKey
import dagger.Module
import dagger.multibindings.Multibinds
import timber.log.Timber
import javax.inject.Inject
import javax.inject.Provider
import kotlin.reflect.KClass

/**
 * Annotation to be applied to a getter or setter function, that is stored in the binary output.
 * A [ViewModelKey] object will be the key in a Map generated by Dagger. The value will be the
 * ViewModel to be retrieved based on the key.
 */
@Target(
    AnnotationTarget.FUNCTION,
    AnnotationTarget.PROPERTY_GETTER,
    AnnotationTarget.PROPERTY_SETTER
)
@Retention(AnnotationRetention.RUNTIME)
@MapKey
annotation class ViewModelKey(val value: KClass<out ViewModel>)

/**
 *
 */
interface ViewModelAssistedFactory<VM : ViewModel> {

    /**
     * Create the ViewModel.
     *
     * @param handle the saved state handle.
     * @return the created ViewModel.
     */
    fun create(handle: SavedStateHandle): VM
}

private typealias ViewModelAssistedFactoryProviders = MutableMap<Class<out ViewModel>, Provider<ViewModelAssistedFactory<out ViewModel>>>
private typealias ViewModelAssistedFactories = MutableMap<Class<out ViewModel>, ViewModelAssistedFactory<out ViewModel>>

/**
 *
 */
class ViewModelFactory internal constructor(
    private val owner: SavedStateRegistryOwner,
    defaultArgs: Bundle?,
    private val viewModelFactories: ViewModelAssistedFactoryProviders
) : AbstractSavedStateViewModelFactory(owner, defaultArgs) {

    init {
        Timber.v("Create $this for an owner: $owner, with default args: $defaultArgs")
    }

    override fun <VM : ViewModel> create(
        key: String,
        modelClass: Class<VM>,
        handle: SavedStateHandle
    ): VM {
        Timber.v("Create ViewModel of class: ${modelClass.canonicalName}, for an owner: $owner, with Handle keys: ${handle.keys()} via: $this")
        @Suppress("UNCHECKED_CAST")
        return requireNotNull(viewModelFactories[modelClass]) {
            "Unknown ViewModel class: $modelClass for an owner: $owner"
        }.get().create(handle) as VM
    }

    /**
     *
     */
    abstract class Creator {

        /**
         *
         */
        fun create(
            owner: SavedStateRegistryOwner
        ): AbstractSavedStateViewModelFactory = create(owner, null)

        /**
         *
         */
        abstract fun create(
            owner: SavedStateRegistryOwner,
            defaultArgs: Bundle?
        ): AbstractSavedStateViewModelFactory
    }
}

/**
 *
 */
class ViewModelFactoryCreator @Inject constructor(
    private val viewModelFactories: ViewModelAssistedFactoryProviders
) : ViewModelFactory.Creator() {

    override fun create(
        owner: SavedStateRegistryOwner,
        defaultArgs: Bundle?
    ): AbstractSavedStateViewModelFactory {
        return ViewModelFactory(owner, defaultArgs, viewModelFactories)
    }
}

/**
 *
 */
@Module(includes = [], subcomponents = [])
abstract class ViewModelInstantiationModule {

    @Multibinds
    internal abstract fun bindVMAssistedFactories(): ViewModelAssistedFactories

    @Binds
    internal abstract fun bindVMFactoryCreator(
        impl: ViewModelFactoryCreator
    ): ViewModelFactory.Creator
}
